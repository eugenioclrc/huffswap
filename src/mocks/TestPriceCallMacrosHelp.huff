#include "../PriceCallMacros.huff"

#define function getInputPrice(uint256, uint256, uint256) nonpayable returns (uint256)
#define function getTokenToEthInputPrice(uint256, address) nonpayable returns (uint256)
#define function getEthToTokenInputPrice(uint256, address) nonpayable returns (uint256)
#define function tokenToEthSwapInput(uint256, uint256, uint256, address, address) nonpayable returns (uint256)
#define function ethToTokenSwapInput(uint256, uint256, address, address) nonpayable returns (uint256)

#define macro MAIN() = takes (0) returns (0) {
  0x00 calldataload 0xe0 shr

  dup1 __FUNC_SIG(getInputPrice) eq getInputPriceJump jumpi
  dup1 __FUNC_SIG(getTokenToEthInputPrice) eq getTokenToEthInputPriceJump jumpi
  dup1 __FUNC_SIG(getEthToTokenInputPrice) eq getEthToTokenInputPriceJump jumpi
  dup1 __FUNC_SIG(tokenToEthSwapInput) eq tokenToEthSwapInputJump jumpi
  dup1 __FUNC_SIG(ethToTokenSwapInput) eq ethToTokenSwapInputJump jumpi

  getInputPriceJump:
    0x04 calldataload     // [input_amount]
    0x24 calldataload     // [input_reserve, input_amount]
    0x44 calldataload     // [output_reserve, input_reserve, input_amount]

    GET_INPUT_PRICE()     // [price]

    0x00                  // [0x00, price]
    mstore

    0x20
    0x00
    return

  getTokenToEthInputPriceJump:
    0x04 calldataload                 // [tokensSold]
    0x24 calldataload                 // [tokenAddress, tokensSold]

    GET_TOKEN_TO_ETH_INPUT_PRICE()    // [price]
    
    0x00                              // [0x00, price]
    mstore                            

    0x20    
    0x00
    return

  getEthToTokenInputPriceJump:
    0x04 calldataload                 // [ethSold]
    0x24 calldataload                 // [tokenAddress, ethSold]

    GET_ETH_TO_TOKEN_INPUT_PRICE()    // [price]
    
    0x00                              // [0x00, price]
    mstore                            

    0x20    
    0x00
    return

  tokenToEthSwapInputJump:
    0x64 calldataload     // [tokenRecipient]
    0x84 calldataload     // [tokenAddress, tokenRecipient]
    0x24 calldataload     // [minEth, tokenAddress, tokenRecipient]
    0x04 calldataload     // [tokensSold, minEth, tokenAddress, tokenRecipient]
    0x44 calldataload     // [deadline, tokensSold, minEth, tokenAddress, tokenRecipient]

    TOKEN_TO_ETH_SWAP_INPUT()   // [ethBought]

    0x00                        
    mstore

    0x20
    0x00
    return

  ethToTokenSwapInputJump:
    0x64 calldataload   // [tokenAddress]
    0x44 calldataload   // [recipient, tokenAddress]
    0x04 calldataload   // [minTokens, recipient, tokenAddress]
    0x24 calldataload   // [deadline, minTokens, recipient, tokenAddress]

    ETH_TO_TOKEN_SWAP_INPUT()   // [ethBought]

    0x00                        
    mstore

    0x20
    0x00
    return

  0x00 0x00 revert
}