#include "../ExchangeHelp.huff"

#define function addLiquidity(uint256 token, uint256 amount, address) payable returns (uint256, uint256)
#define function removeLiquidity(uint256 token, uint256 amount, address) payable returns (uint256, uint256)

#define macro ADDLIQUIDITY() = takes (0) returns (0) {
    0x44 calldataload // token address, por ahora metemos cualquiera
    0x24 calldataload // param1 max_tokens
    
    // total minted
    0x04 calldataload // param0
    
    // [ token minted, amount_token_max]
  
    // Input Stack: [total_supplyLP, max_tokens, address token]
    CALCULATE_TRANSFERS_FOR_LIQUIDITY()
    // Output Stack: [liquidity_to_mint,tokens_to_transfer]

    0x20 mstore
    0x00 mstore
    0x40 0x00 return

}

#define macro REMOVELIQUIDITY() = takes (0) returns (0) {
    0x44 calldataload // token address, por ahora metemos cualquiera
    0x24 calldataload // param1 max_tokens
    
    // total minted
    0x04 calldataload // param0
    
  
    // Input Stack: [total_supplyLP, amount_remove, address token]
    CALCULATE_TRANSFERS_REMOVE_FOR_LIQUIDITY()
    // Output Stack: [eth_amount, token_amount]

    0x20 mstore
    0x00 mstore
    0x40 0x00 return

}


#define macro MAIN() = takes (0) returns (0) {
    pc calldataload 0xE0 shr

    dup1 __FUNC_SIG(addLiquidity) eq addLiquidityJump jumpi
    dup1 __FUNC_SIG(removeLiquidity) eq removeLiquidityJump jumpi
    
    0x00 dup1 revert
    
    addLiquidityJump:
      ADDLIQUIDITY()

    removeLiquidityJump:
      REMOVELIQUIDITY()

    fundJump:
      0x00 0x00 return

}