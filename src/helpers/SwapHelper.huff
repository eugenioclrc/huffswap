#include "huffmate/utils/CommonErrors.huff"
#include "huffmate/utils/SafeTransferLib.huff"

#define function balanceOf(address) view returns (uint256)

#define error ErrDeadlineExpired(uint256)
#define error ErrEthOutput(uint256, uint256)
#define error ErrTokensOutput(uint256)

#define event EthPurchase(address indexed buyer, address recipient, uint256 tokens_sold, uint256 eth_bought)
#define event TokenPurchase(address indexed buyer, address recipient, uint256 eth_sold, uint256 tokens_bought)
#define event TokenToTokenPurchase(address indexed buyer, uint256 tokens_sold, uint256 tokens_bought)

#define macro CALL_ETH_TO_TOKEN_SWAP_INPUT() = takes(4) returns(1) {
    // Input Stack:   [exchangeAddr, ethBought, deadline, minTokensBought]
    // Output Stack:  [tokensBought]

    __FUNC_SIG("ethToTokenSwapInput(uint256,uint256,address)")
    0xE0 shl
    0x00 mstore

    swap3           // [minTokensBought, ethBought, deadline, exchangeAddr]
    0x04
    mstore          // [ethBought, deadline, exchangeAddr]

    swap1           // [deadline, ethBought, exchangeAddr]
    0x24
    mstore          // [ethBought, exchangeAddr]

    caller
    0x44
    mstore
    
    swap1     // [exchangeAddr, ethBought]

    0x20      // [retSize, exchangeAddr, ethBought]
    0x00      // [retOffset, retSize, exchangeAddr, ethBought]
    0x64      // [argsSize, retOffset, retSize, exchangeAddr, ethBought]
    0x00      // [argsOffset, argsSize, retOffset, retSize, exchangeAddr, ethBought]  
    
    dup6      // [ethBought, argsOffset, argsSize, retOffset, retSize, exchangeAddr, ethBought]  

    dup6      // [exchangeAddr, ethBought, argsOffset, argsSize, retOffset, retSize, exchangeAddr, ethBought]  
    
    gas       // [gas, exchangeAddr, ethBought, argsOffset, argsSize, retOffset, retSize,  exchangeAddr, ethBought]  
    
    call      // [success, exchangeAddr, ethBought]

    // Revert if call is unsuccessful
    //! todo validate that data.length == 0
    _success jumpi
    0x00 dup1 revert
    
    _success:             // [exchangeAddr, ethBought]
      pop                 // cleaning stack
      pop
      0x00
      mload               // [tokensBought]
}

#define macro ETH_TO_TOKEN_SWAP_INPUT() = takes(4) returns(1) {
  // Input Stack:   [deadline, minTokens, recipient, tokenAddress]
  // Output Stack:  [tokensBought]

  // deadline >= block.timestamp
  VALIDATE_DEADLINE()     // [minTokens, recipient, tokenAddress]

  // msg.value != 0
  callvalue               
  IS_NOT_ZERO()           // [minTokens, recipient, tokenAddress]

  // minTokens != 0
  dup1
  IS_NOT_ZERO()           // [minTokens, recipient, tokenAddress]

  dup3
  address           
  GET_TOKEN_BALANCE_OF_STATIC()   // [tokenReseve, minTokens, recipient, tokenAddress]

  callvalue
  selfbalance
  sub               // [ethReserve, tokenReseve, minTokens, recipient, tokenAddress]

  callvalue         // [msg.sender, ethReserve, tokenReseve, minTokens, recipient, tokenAddress]
  swap2             // [tokenReserve, ethReserve, msg.sender, tokenReseve, minTokens, recipient, tokenAddress]
  GET_INPUT_PRICE() // [tokensBought, minTokens, recipient, tokenAddress]

  swap1             // [minTokens, tokensBought, recipient, tokenAddress]
  dup2 dup2 lt      // [minTokensLessThanTokensBought, minTokens, tokensBought, recipient, tokenAddress]      
  dup3 dup3 eq      // [minTokensEqualTokensBought, minTokensLessThanTokensBought, minTokens, tokensBought, recipient, tokenAddress]      
  or                // [validTokensBought, minTokens, tokensBought, recipient, tokenAddress]

  _continue
  jumpi
  dup2
  // throw error
  __ERROR(ErrTokensOutput)          // [signature, minTokens, tokensBought, recipient, tokenAddress]
  0x00 
  mstore                            // [minTokens, tokensBought, recipient, tokenAddress]
  0x04
  mstore                            // [tokensBought, recipient, tokenAddress]]

  0x24
  0x00
  revert

  _continue:              // [minTokens, tokensBought, recipient, tokenAddress]
    pop                   // [tokensBought, recipient, tokenAddress]

    swap2                 // [tokenAddress, recipient, tokensBought]
    dup3                  // [tokensBought, tokenAddress, recipient, tokensBought]
    dup3                  // [recipient, tokensBought, tokenAddress, recipient, tokensBought]
    SAFE_TRANSFER(0x00)   // [recipient, tokensBought]

    // (address indexed buyer, address recipient, uint256 eth_sold, uint256 tokens_bought)

    // EVENT
    // todo: fix event
    // recipient
    0x00
    mstore            // [tokensBought]

    // eth_sold
    callvalue
    0x20
    mstore

    // tokensBought
    dup1
    0x40
    mstore            // [tokensBought]

    caller
    __EVENT_HASH(TokenPurchase)       // [event_hash, caller, tokensBought]
    0x00
    0x60
    log2  
}

#define macro TOKEN_TO_ETH_SWAP_INPUT() = takes(5) returns(0) {
  // Input Stack:   [deadline, tokensSold, minEth, tokenAddress, tokenRecipient]
  // Output Stack:  [ethBought]

  // deadline >= block.timestamp
  VALIDATE_DEADLINE()             // [tokensSold, minEth, tokenAddress, tokenRecipient]

  // tokensSold != 0
  dup1                            // [tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]
  IS_NOT_ZERO()                   // [tokensSold, minEth, tokenAddress, tokenRecipient]


  // minEth != 0
  dup2                            // [minEth, tokensSold, minEth, tokenAddress, tokenRecipient]
  IS_NOT_ZERO()                   // [tokensSold, minEth, tokenAddress, tokenRecipient]

  dup1                            // [tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]

  dup4                            // [tokenAddress, tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]
  address                         // [address(this), tokenAddress, tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]
  GET_TOKEN_BALANCE_OF_STATIC()   // [tokenReserve, tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]

  selfbalance                     // [ethBalance, tokenReserve, tokensSold, tokensSold, minEth, tokenAddress, tokenRecipient]
  GET_INPUT_PRICE()               // [ethBought, tokensSold, minEth, tokenAddress, tokenRecipient]

  swap2                           // [minEth, tokensSold, ethBought, tokenAddress, tokenRecipient]
  dup3                            // [ethBought, minEth, tokensSold, ethBought, tokenAddress, tokenRecipient]
  VALIDATE_ETH_RECEIVE()          // [tokensSold, ethBought, tokenAddress, tokenRecipient]

  swap2                           // [tokenAddress, ethBought, tokensSold, tokenRecipient]
  dup3                            // [tokensSold, tokenAddress, ethBought, tokensSold, tokenRecipient]
  address
  caller                          // [msg.sender, address(this), tokensSold, tokenAddress, ethBought, tokensSold, tokenRecipient]
  SAFE_TRANSFER_FROM(0x00)        // [ethBought, tokensSold, tokenRecipient]

  dup1                            // [ethBought, ethBought, tokensSold, tokenRecipient]
  dup4                            // [tokenRecipient, ethBought, ethBought, tokensSold, tokenRecipient]
  SAFE_TRANSFER_ETH()             // [ethBought, tokensSold, tokenRecipient]

  dup1                            // [ethBought, ethBought, tokensSold, tokenRecipient]
  swap3                           // [ethBought, tokensSold, tokenRecipient, ethBought]

  // EVENT
  // ethBought
  0x40
  mstore                          // [tokensSold, tokenRecipient]

  // tokensSold
  0x20
  mstore                          // [tokenRecipient]

  // tokenRecipient
  0x00
  mstore                          // []

  caller                          // [msg.sender]
  
  __EVENT_HASH(EthPurchase)       // [event_hash, msg.sender]
  0x00
  0x40
  log2                            // []
}

#define macro VALIDATE_ETH_RECEIVE() = takes(2) returns(0) {
  // Input Stack:  [ethBought, minEth]
  // Output Stack: []

  dup2          // [minEth, ethBought, minEth]
  dup2          // [ethBought, minEth, ethBought, minEth]
  gt            // [greaterThanMinEth, ethBought, minEth]
  dup2          // [ethBought, greaterThanMinEth, ethBought, minEth] 
  dup4          // [minEth, ethBought, greaterThanMinEth, ethBought, minEth] 
  eq            // [equalThanMinEth, greaterThanMinEth, ethBough, minEth]
  or            // [validAmount, ethBough, minEth]]
  _continue
  jumpi
  
  __ERROR(ErrEthOutput)     // [signature, ethBough, minEth]
  0x00
  mstore                    // [ethBough, minEth]

  0x04
  mstore                    // [minEth]
  
  0x24                        
  mstore                    // []

  0x44
  0x00
  revert

  _continue: // [ethBough, minEth]
    pop
    pop // clean stack
}

#define macro VALIDATE_DEADLINE() = takes(1) returns(0) {
  // Input Stack:  [deadline]
  // Output Stack: []

  dup1                              // [deadline, deadline]
  timestamp                         // [timestamp, deadline, deadline]
  lt                                // [timestampLessThanDeadline, deadline]

  swap1                             // [deadline, timestampLessThanDeadLine]
  timestamp                         // [timestamp, deadline, timestampLessThanDeadLine]
  eq                                // [timestampEqualThanDeadLine, timestampLessThanDeadLine]
  or                                // [validDeadLine]

  _continue
  jumpi

  // throw error
  __ERROR(ErrDeadlineExpired)       // [signature, deadline]
  0x00 
  mstore                            // [deadline]
  0x04
  mstore                            // []
  
  0x24
  0x00
  revert

  _continue:
}

#define macro GET_INPUT_PRICE() = takes(3) returns(1) {
  // Input Stack:  [output_reserve, input_reserve, input_amount]
  // Output Stack: [price]

  0x3E5         // [997, output_reserve, input_reserve, input_amount]
  dup4          // [input_amount, 997, output_reserve, input_reserve, input_amount]
  mul           // [input_amount_with_fee, output_reserve, input_reserve, input_amount]
  dup1          // [input_amount_with_fee, input_amount_with_fee, output_reserve, input_reserve, input_amount]
  swap2         // [output_reserve, input_amount_with_fee, input_amount_with_fee, input_reserve, input_amount]
  mul           // [numerator, input_amount_with_fee, input_reserve, input_amount]
  dup3          // [input_reserve, numerator, input_amount_with_fee, input_reserve, input_amount]
  0x3E8         // [1000, input_reserve, numerator, input_amount_with_fee, input_reserve, input_amount]
  mul           // [input_reserve_x_1000, numerator, input_amount_with_fee, input_reserve, input_amount]
  dup3          // [input_amount_with_fee, input_reserve_x_1000, numerator, input_amount_with_fee, input_reserve, input_amount]
  add           // [denominator, numerator, input_amount_with_fee, input_reserve, input_amount]
  swap1         // [numerator, denominator, input_amount_with_fee, input_reserve, input_amount]
  div           // [price, input_amount_with_fee, input_reserve, input_amount]
  
  // cleaning stack
  swap3
  pop
  pop
  pop
}

#define macro GET_TOKEN_TO_ETH_INPUT_PRICE() = takes(2) returns(1) {
    // Input Stack:    [tokenAddress, tokensSold]
    // Output Stack:   [price]  

    dup1
    IS_NOT_ADDRESS_ZERO()

    address       // [fromAddress, tokenAddress, tokenSold]
    GET_TOKEN_BALANCE_OF_STATIC()   // [tokenReserve, tokenSold]

    selfbalance         // [ethBalance, tokenReserve, tokensSold]

    GET_INPUT_PRICE()   // [price]
}

#define macro GET_ETH_TO_TOKEN_INPUT_PRICE() = takes(2) returns(1) {
    // Input Stack:    [tokenAddress, ethSold]
    // Output Stack:   [price]  

    // ethSold != 0
    dup2
    IS_NOT_ZERO()

    address       // [fromAddress, tokenAddress, ethSold]
    GET_TOKEN_BALANCE_OF_STATIC()   // [totalReserve, ethSold]

    // totalReserve != 0
    dup1 
    IS_NOT_ZERO()

    selfbalance         // [balance, totalReserve, ethSold]

    swap1               // [totalReserve, balance, ethSold]

    GET_INPUT_PRICE()   // [price]
}

#define macro IS_NOT_ZERO() = takes(1) returns(0) {
  // Input Stack: [value]
  // Output Stack: []

  _continue   
  jumpi
  ZERO_ASSETS(0x00)

  _continue:
}

#define macro IS_NOT_ADDRESS_ZERO() = takes(1) returns(0) {
  // Input Stack: [address]
  // Output Stack: []

  _continue 
  jumpi
  ZERO_ADDRESS(0x00)

  _continue:
}

#define macro GET_TOKEN_BALANCE_OF_STATIC() = takes(2) returns(1) {
  // Input Stack:  [fromAddress, tokenAddress]
  // Output Stack: [balance]

  // save signature on memory
  __FUNC_SIG(balanceOf) // [signature, fromAddress, tokenAddress]
  0xE0 shl
  0x00 mstore // [fromAddress, tokenAddress]      

  // save fromAddress in memory
  0x04        // [0x04, fromAddress, tokenAddress]
  mstore      // [tokenAddress]

  0x20      // [retSize, tokenAddress]
  0x00      // [retOffset, retSize, tokenAddress]
  0x24      // [argsSize, retOffset, retSize, tokenAddress]
  0x00      // [argsOffset, argsSize, retOffset, retSize, tokenAddress]  
  
  dup5      // [tokenAddress, argsOffset, argsSize, retOffset, retSize, tokenAddress]  
  
  gas       // [gas, tokenAddress, argsOffset, argsSize, retOffset, retSize, tokenAddress]  
  
  staticcall  // [success, tokenAddress]

  // Revert if call is unsuccessful
  _success jumpi
  0x00 dup1 revert
  
  _success:             // [tokenAddress]
    pop                 // clean stack
    0x00
    mload               // [balance] 
}